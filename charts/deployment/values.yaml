# Default values for a "deployment"

# REQUIRED for you to set a value here, name of your service
name: "override-this-name"

# Number of pods in deployment, default of not highly available (override on HA environments)
replicaCount: 1

# minReadySeconds
minReadySeconds: false

# Rollback limit
revisionHistoryLimit: 10

# The pod priority, to make things more critical
# See: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
priorityClassName: ""

# Share process namespace to allow sidecars to see each others processes.  You can use this feature to configure
#    cooperating containers, such as a log handler sidecar container, or to troubleshoot container images that don't
#    include debugging utilities like a shell.
#
# NOTE/WARNING: Enabling this may break certain containers that expect/demand their main process to be process #1.
# See: https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/
shareProcessNamespace: false

# Image repository location (override if needed)
image:
  # Which image to release (NOTE: ONLY SPECIFY IF YOU ARE DEPLOYING EXTERNALLY, eg from dockerhub)
  tag: ""
  # Which repo to use (NOTE: ONLY SPECIFY IF YOU ARE DEPLOYING EXTERNALLY)
  repository: "override this repository"
  # Which command to run (NOTE: ONLY SPECIFY IF YOU NEED, IF NOT SPECIFIED WILL USE DOCKER DEFAULT)
  command: []
  # What args to pass to the command (NOTE: ONLY SPECIFY IF YOU NEED, IF NOT SPECIFIED WILL USE DOCKER DEFAULT)
  args: []
  # Image pull policy: IfNotPresent / Always
  imagePullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## imagePullSecrets:
  ##   - name: myRegistryKeySecretName
  ##
  imagePullSecrets: []

# To change the securityContext for the pod.
# Everything under 'podSecurityContext' will be copied as-is under the 'securityContext' key for the pod spec
# https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
#
podSecurityContext:
  runAsNonRoot: true
#  runAsUser: 1000
#  fsGroup: 1000

# To change the securityContext for the container. There are some different options k8s allows here vs at the pod level above.
# Everything under 'containerSecurityContext' will be copied as-is under the 'securityContext' key for the container spec
# https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
#
# containerSecurityContext:
#   capabilities:
#     add:
#     - SYS_ADMIN
#   privileged: true

# Ingress definitions
ingress:
  enabled: false
  primary:
    enabled: true
    name: "primary-ingress"
    # If we want to have affinity in nginx enabled
    nginx_affinity: true
    pathType:  Prefix # Prefix or ImplementationSpecific. Default is Prefix.
    ingressClassName: "nginx"
    enableMultiPath: false
    annotations: {}
    hosts:
      - host: primary.example.com
        paths:
          - path: /
            serviceName: primary-service
            servicePort: 80
    tls: []
  secondary:
    enabled: false
    name: "secondary-ingress"
    # If we want to have affinity in nginx enabled
    nginx_affinity: true
    pathType:  Prefix # Prefix or ImplementationSpecific. Default is Prefix.
    ingressClassName: "nginx"
    enableMultiPath: false
    annotations: {}
    hosts:
      - host: secondary.example.com
        paths:
          - path: /
            serviceName: secondary-service
            servicePort: 80
    tls: []

# Service definitions
service:
  enabled: true
  annotations: {}
  type: ClusterIP
  port: 80
  targetPort: 8080
  name: default-service
  # allocateLoadBalancerNodePorts: false
  # externalTrafficPolicy: Local
  additionalPorts: []

# Additional container ports to open
# This can allow scraping by prometheus, or exposure to other services
additionalPorts: []
  # - containerPort: 8001
  #   name: http-admin
  #   protocol: TCP

# Additional pod annotations
podAnnotations: {}
  # tick: "1528451892"

# If you're using Kubernetes 1.20+ you'll want to enable this, this uses the new common label scheme
# See: https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
# This is set to "true" by default. Ideally, all of your sub-charts
# use or do not use this.
usingRecommendedLabels: true

# Additional labels put onto anything that can be labelled (pods, services)
labels: {}

# This enables the "default" label we automatically put everywhere (app: <name>)
labelsEnableDefault: true

# This adds lifecycle events
lifecycle: {}

# Environment variables (for globals, all deployments)
globalEnvs: []

# Secondary environment variables (for globals, all deployments, to help with multi-inheritance)
globalEnvsSecondary: []

# A tertiary source for env variables (eg: used for a specific env (eg: dev, or staging))
extraEnvs: []

# stdin and tty status
tty: false

# A way to pull secondary env variables from configmaps and secrets
envFrom: []

# This enables the deprecated memory kibibytes env variables for backwards compatibility. TODO: Remove from future release.
usingMemoryKibiBytesEnvs: false

# livenessProbes are used to determine when to restart a container
livenessProbe:
  enabled: true
  # For the liveness probe we'll wait a full 2 minutes, just incase this service takes a while to start-up
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 9
  successThreshold: 1
  failureThreshold: 3

  # Specify either httpGet, tcpSocket or exec
  # httpGet uses scheme, path and port (below)
  # tcpSocket uses port (below)
  # exec uses command (below)
  probeType: httpGet

  # parameters for probes
  scheme: HTTP
  path: /alive
  port: 8080
  command:
    - ls -la /


# readinessProbes are used to determine when a container is ready to start accepting traffic
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 4
  successThreshold: 2
  failureThreshold: 2

  # Specify either httpGet, tcpSocket or exec
  # httpGet uses scheme, path and port (below)
  # tcpSocket uses port (below)
  # exec uses command (below)
  probeType: httpGet

  # parameters for probes
  scheme: HTTP
  path: /ready
  port: 8080
  command:
    - ls -la /

# Adjust the DNS configuration of your pods
# https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-config
dnsConfig:
  enabled: false
  # Optimization/Load/Scale note: Reduce the ndots value, to reduce the search path expansion of DNS queries, less impact on core-dns, default is 6, lower to 2 ideally
  ndots: 6
  # Customize the DNS options.  NOTE: Do not customize NDOTS here, instead use the above variable
  options: []
  # Customize the search domains.  Shouldn't need this normally, but useful for compatibility with legacy platforms, or for a multi-region or multi-cloud setup
  searches: []
  # Customize the nameservers.
  nameservers: []

# container resource requests/limits
# this is set VERY low by default, to be aggressive above resource limiting, please override this if necessary
# Note: Limits are HARD Limits
#       Requests are "soft" limits and are what affects HPA (autoscaling) aggressiveness and are what is guaranteed
resources:
  limits:
    cpu: 100m
    memory: 64Mi
  requests:
    cpu: 50m
    memory: 32Mi

affinity:
  enabled: true
  podAntiAffinity:
    enabled: true
    # For antiaffinity 2 default podAffinityTerm is available and user only needs to select the setting mode for default content.
    # mode can be set to "required" or "preferred".
    mode: preferred
    # If default podAntiAffinity is not what is wanted, user can define explitly antiaffinity value whihc will override the default.
    # value:
    #   preferredDuringSchedulingIgnoredDuringExecution:
    #     - weight: 100
    #       podAffinityTerm:
    #         labelSelector:
    #           matchExpressions:
    #             - key: app.kubernetes.io/name
    #               operator: In
    #               values:
    #                 - your-app-name
    #         topologyKey: "kubernetes.io/hostname"
  podAffinity:
    enabled: false
    # Define the podAffinity value here
    #value: {}

# Assign pods to nodes based on nodeSelector labels, define a default here if desired
nodeSelector: {}
# purpose: node-feature-name

# Assign pods to nodes based on tolerations and taints
tolerations: []

# Init container(s)
initContainers: []
  # - name: volume-mount-hack
  #   image: busybox
  #   command: ["sh", "-c", "chown -R 1000:1000 /var/chaindata"]
  #   volumeMounts:
  #    - name: data
  #      mountPath: /var/chaindata

# Additional containers to be added to the pod (eg: add the cloudsql proxy)
extraContainers: []

# Volumes added to the pod eg: for cloudsql
volumes: []
volumeMounts: []

# Define any number of configMaps
# If configmaps.configmap2.name given explicitly, it's named with that name.
# Otherwise, configmap is named with the <name>-configmap-<key of the configmap> E.g. override-this-name-configmap-configmap1
# TODO: Helm Library charts has limitation that .Files.Get scope is chart specific
# so it sees only files in the library chart folder and not in the main chart folder that uses library chart as an dependency.
# So, currently only inlide data for configMaps are supported. If user wants to use .Files functions, need to create configMap manifest in the main chart folder.
configmaps: {}
  # configmap1:
  #   annotations: {}
  #   data:
  #     key1: value1
  #     key2: value2
  # configmap2:
  #   name: configmap2
  #   annotations: {}
  #   data:
  #     keyA: valueA
  #     keyB: valueB
  # configmap-fromfile:
  #   dataFromfile:
  #     key: files/somefile.yaml

# For AWS Security Groups
securityGroupIDs: []

# Whether or not to enable autoscaling
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 8
  targetCPUUtilizationPercentage: 75
  targetMemoryUtilizationPercentage: 90

# Whether or not we want a pod disruption budget, enabled by default, but this only is enabled if replicaCount > 1
podDistuptionBudget:
  enabled: true
  # maxUnavailable: 1
  minAvailable: 1

# What deployment strategy to use
deploymentStrategy:
  # Recreate / RollingUpdate
  type: RollingUpdate
  rollingUpdate:
    # Minimize downtime by only having only 25 percent max unavailable.  If you're only at 3 pods, because 33% it won't kill any pods before one gets healthy first.
    maxUnavailable: 25%
    # Allows up to 25% more pods to be created when trying to roll out.  If you're at 10 pods, it'll spin up 2 new ones (20%) and when healthy will wait for termination of old ones to ensure compliance of 25%
    maxSurge: 25%

# This is so we can use the same tag on various different objects (eg: statefulsets, crons, etc) via our Gitlab CI Automation
global:
  image:
    tag: ""
  # This can be used Gitlab CI and helm automatically to set our URIs based on namespace
  namespace: ""

sidecar:
  enabled: false
sidecars: []
  # - name: sidecar1
  #   image: sidecar1-image
  #   imagePullPolicy: IfNotPresent
  # - name: sidecar2
  #   image: sidecar2-image
  #   imagePullPolicy: Always

# This is for service accounts
serviceAccount:
  # Disabled by default, set to true if you want
  enabled: false
  # Add annotations if desited,
  annotations: {}
    # Here's an example of assigning an IAM role to a pod
    # eks.amazonaws.com/role-arn: arn:aws:iam::123123123:role/role-name-goes-here

# If we want a hostname set
hostname: ""

## For RBAC support, enable if you want, and set the rules you wish, examples below
rbac:
  create: false
  rules:
    ## Define specific rbac permissions.
    # Eg: This grants all on API groups
    # - apiGroups: ['*']
    #   resources: ['*']
    #   verbs: ['*']
    # Eg: This grants all on non resource URLs
    # - nonResourceURLs: ['*']
    #   verbs: ['*']
    # Eg: This is "readonly" for common resources
    # - resources: ["deployments", "configmaps", "pods", "pods/log", "services", "jobs", "jobs/status", "nodes", "serviceaccount", "namespaces"]
    #   verbs: ["get", "list", "watch"]

  ## Make this into a clusterwide role to give access to all namespaces if desired, disabled by default for more security
  clusterWideAccess: false
